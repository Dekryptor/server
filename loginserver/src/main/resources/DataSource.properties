# The connection username to be passed to our JDBC driver to establish a connection.
username = root

# The connection password to be passed to our JDBC driver to establish a connection.
password = root

# The connection URL to be passed to our JDBC driver to establish a connection.
url = jdbc:mariadb://localhost/openbns

# The fully qualified Java class name of the JDBC driver to be used.
driverClassName = org.mariadb.jdbc.Driver

# The default auto-commit state of connections created by this pool.
defaultAutoCommit = true

# The initial number of connections that are created when the pool is started.
# Default 0
initialSize = 0

# The maximum number of active connections that can be allocated from this pool at the same time, or negative for no limit.
# Default 8
maxActive = 8

# The maximum number of connections that can remain idle in the pool, without extra ones being released, or negative for no limit.
# NOTE: If maxIdle is set too low on heavily loaded systems it is possible you will see connections being closed and almost immediately new connections being opened.
# This is a result of the active threads momentarily closing connections faster than they are opening them, causing the number of idle connections to rise above maxIdle.
# The best value for maxIdle for heavily loaded system will vary but the default is a good starting point.
# Default 8
maxIdle = 8

# The minimum number of connections that can remain idle in the pool, without extra ones being created, or zero to create none.
# Default 0
minIdle = 0

# The maximum number of milliseconds that the pool will wait (when there are no available connections) for a connection to be returned before throwing an exception, or -1 to wait indefinitely.
# Default -1
maxWait = -1

# The SQL query that will be used to validate connections from this pool before returning them to the caller.
# If specified, this query MUST be an SQL SELECT statement that returns at least one row.
validationQuery = SELECT 1

# The indication of whether objects will be validated before being borrowed from the pool.
# If the object fails to validate, it will be dropped from the pool, and we will attempt to borrow another.
# NOTE - for a true value to have any effect, the validationQuery parameter must be set to a non-null string.
# Default true
testOnBorrow = false

# The indication of whether objects will be validated before being returned to the pool.
# NOTE - for a true value to have any effect, the validationQuery parameter must be set to a non-null string.
# Default false
testOnReturn = false

# The indication of whether objects will be validated by the idle object evictor (if any).
# If an object fails to validate, it will be dropped from the pool.
# NOTE - for a true value to have any effect, the validationQuery parameter must be set to a non-null string.
# Default false
testWhileIdle = true

# The number of milliseconds to sleep between runs of the idle object evictor thread.
# When non-positive, no idle object evictor thread will be run.
# Default -1
timeBetweenEvictionRunsMillis = 30000

# The number of objects to examine during each run of the idle object evictor thread (if any).
# Default 3
numTestsPerEvictionRun = 8

# The minimum amount of time an object may sit idle in the pool before it is eligable for eviction by the idle object evictor (if any).
# Default = 1000 * 60 * 30
minEvictableIdleTimeMillis = 30000


# Enable prepared statement pooling for this pool.
# Default false
poolPreparedStatements = false

# The maximum number of open statements that can be allocated from the statement pool at the same time, or zero for no limit.
# NOTE - Make sure your connection has some resources left for the other statements.
# Pooling PreparedStatements may keep their cursors open in the database, causing a connection to run out of cursors,
# especially if maxOpenPreparedStatements is left at the default (unlimited) and an application opens a large number of different PreparedStatements per connection.
# To avoid this problem, maxOpenPreparedStatements should be set to a value less than the maximum number of cursors that can be open on a Connection.
# Default 0
maxOpenPreparedStatements = 0


# Flag to remove abandoned connections if they exceed the removeAbandonedTimout.
# If set to true a connection is considered abandoned and eligible for removal if it has been idle longer than the removeAbandonedTimeout.
# Setting this to true can recover db connections from poorly written applications which fail to close a connection.
# Default false
removeAbandoned = false

# Timeout in seconds before an abandoned connection can be removed.
# Default 300
removeAbandonedTimeout = 300

# Flag to log stack traces for application code which abandoned a Statement or Connection.
# Logging of abandoned Statements and Connections adds overhead for every Connection open or new Statement because a stack trace has to be generated.
# Default false
logAbandoned = false